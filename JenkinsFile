pipeline {
	agent any
	stages {
		stage('Checkout'){
			steps {
				git 'https://github.com/catalinpatularu78/ship-management.git'
			}
		}
		stage('Build'){
			steps {
				bat "mvn clean compile"
			}
		}
		stage('Test'){
			steps {
			 	bat "mvn test"
			 	junit '**/target/surefire-reports/TEST-*.xml'
			 }
		}
		stage('Package') {
			steps {
				bat "mvn package"
			}
		}	
		stage('SonarQube') {
            steps {
                withSonarQubeEnv('sonarqube') {
                  bat "mvn verify sonar:sonar  -Dsonar.host.url=http://localhost:9000  -Dsonar.login=admin -Dsonar.password=gazeLLa122300@!SQ -Dsonar.tests=src/test -Dsonar.jacoco.reportPath=target/jacoco.exec -Dsonar.java.coveragePlugin=jacoco -Dsonar.junit.reportsPath=target/surefire-reports -Dsonar.surefire.reportsPath=target/surefire-reports"
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
                        def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }	
	}
}